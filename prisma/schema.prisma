datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Language {
  ENGLISH
  HINDI
  KANNADA
  TELUGU
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Visibility {
  PUBLIC
  FRIENDS_ONLY
  PRIVATE
}

enum PostCategory {
  GENERAL
  TECH
  ART
  LIFESTYLE
  EDUCATION
  ENTERTAINMENT
}


model User {
  id         String    @id @default(cuid())
  email      String    @unique
  name       String
  penName    String    @unique
  about      String?
  dImage     String?
  bImage     String?
  gender     Gender?
  dob        DateTime?
  passion    String?
  occupation String?
  language   Language?
  district   String?
  state      String?
  passkeys   Passkey[]
  sessions   Session[]
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  createdAt  DateTime  @default(now())
  onboardAt  DateTime?
}


model Passkey {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  credentialId String   @unique
  publicKey    String
  counter      Int      @default(0)
  transports   String?
  createdAt    DateTime @default(now())
}

model OtpCode {
  id         String    @id @default(cuid())
  email      String
  codeHash   String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime  @default(now())
  ip         String?
  userAgent  String?

  @@index([email])
  @@index([expiresAt])
}

model Session {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
  ip        String?
  userAgent String?

  @@index([userId])
  @@index([expiresAt])
}

model Post {
  id         String       @id @default(cuid())
  content    String
  authorId   String
  author     User         @relation(fields: [authorId], references: [id])
  media      PostMedia[]  // one-to-many relation (max 4 per post)
  comments   Comment[]
  likes      Like[]
  parentId   String?
  parent     Post?        @relation("PostToReplies", fields: [parentId], references: [id])
  replies    Post[]       @relation("PostToReplies")
  visibility Visibility   @default(PUBLIC)
  category   PostCategory @default(GENERAL)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([authorId])
  @@index([createdAt])
  @@index([category])
}


model PostMedia {
  id        String   @id @default(cuid())
  url       String
  type      MediaType
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId]) // one like per user per post
}
